@model IEnumerable<Sports_Video_Logbook.Models.Tarefa>

@{
    ViewData["Title"] = User.IsInRole("Aluno") ? "LogBook" : "Lista de Tarefas";
}

<div class="skills-card">
    <div class="skills-header">
        <form id="tarefaSearchForm" method="get" style="display: flex; width: 100%; gap: 15px;">
            <input id="searchTarefa" name="search" type="text" class="skills-search" placeholder="Pesquisar tarefas..." value="@ViewBag.SearchValue" autocomplete="off" style="flex: 1;" />
            
            <select id="ucFilter" name="uc" class="skills-search" style="flex: 1;">
                <option value="">Todas as UCs</option>
                @foreach (var uc in ViewBag.UCsDisponiveis ?? new List<dynamic>())
                {
                    @if (ViewBag.UCValue == uc.Id.ToString())
                    {
                        <option value="@uc.Id" selected>@uc.Nome</option>
                    }
                    else
                    {
                        <option value="@uc.Id">@uc.Nome</option>
                    }
                }
            </select>
        </form>
    </div>
    
    @if (TempData["Success"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert" style="margin: 15px 0;">
            @TempData["Success"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }
    
    @if (TempData["Error"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert" style="margin: 15px 0;">
            @TempData["Error"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }
    
    @if (!Model.Any())
    {
        <div class="alert alert-info text-center" style="margin: 20px 0;">
            <i class="bi bi-info-circle"></i> 
            @if (User.IsInRole("Aluno"))
            {
                @:Nenhuma tarefa encontrada no seu histórico.
            }
            else
            {
                @:Nenhuma tarefa encontrada. Crie a primeira tarefa para começar.
            }
        </div>
    }
    else
    {
        <table class="skills-table">
            <thead>
                <tr>
                    <th class="skills-th">Tarefa</th>
                    @if (User.IsInRole("Professor"))
                    {
                        <th class="skills-th">Aluno</th>
                    }
                    <th class="skills-th">Unidade Curricular</th>
                    <th class="skills-th">Data Limite</th>
                    <th class="skills-th skills-th-action">@(User.IsInRole("Professor") ? "Ações" : "Ação")</th>
                </tr>
            </thead>
            <tbody>
            @foreach (var item in Model) 
            {
                <tr class="skill-row">
                    <td class="skills-td">
                        <strong>@item.Titulo</strong>
                        @if (!string.IsNullOrEmpty(item.Descricao))
                        {
                            <br><small class="text-muted">@item.Descricao</small>
                        }
                        <br>
                        @if (User.IsInRole("Aluno"))
                        {
                            @if (item.Concluida)
                            {
                                <span class="badge bg-success">
                                    <i class="bi bi-check-circle"></i> Concluída
                                </span>
                            }
                            else
                            {
                                <span class="badge" style="background-color: #b30000; color: white;">
                                    <i class="bi bi-exclamation-triangle"></i> Expirada
                                </span>
                            }
                        }
                        else
                        {
                            @if (item.Concluida)
                            {
                                <span class="badge bg-success">
                                    <i class="bi bi-check-circle"></i> Concluída
                                </span>
                            }
                            else if (item.DataFim < DateTime.Now)
                            {
                                <span class="badge" style="background-color: #b30000; color: white;">
                                    <i class="bi bi-exclamation-triangle"></i> Expirada
                                </span>
                            }
                            else
                            {
                                <span class="badge bg-warning text-dark">
                                    <i class="bi bi-clock"></i> Pendente
                                </span>
                            }
                        }
                    </td>
                    @if (User.IsInRole("Professor"))
                    {
                        <td class="skills-td">@(item.Aluno?.UserName ?? "N/A")</td>
                    }
                    <td class="skills-td">@(item.UC?.Nome ?? "N/A")</td>
                    <td class="skills-td">
                        @item.DataFim.ToString("dd/MM/yyyy")
                        <br><small class="text-muted">@item.DataFim.ToString("HH:mm")</small>
                        @if (User.IsInRole("Aluno"))
                        {
                            @if (item.Concluida)
                            {
                                <br><small class="text-success">
                                    <i class="bi bi-check-circle"></i> Concluída em tempo
                                </small>
                            }
                            else
                            {
                                <br><small class="text-danger">
                                    <i class="bi bi-exclamation-triangle"></i> Não concluída
                                </small>
                            }
                        }
                    </td>
                    <td class="skills-td skills-td-action">
                        @if (User.IsInRole("Professor"))
                        {
                            <div style="display: flex; gap: 8px; flex-wrap: wrap;">
                                <a asp-action="Details" asp-route-id="@item.Id" class="skills-details-btn">DETALHES</a>
                                <button type="button" class="skills-details-btn" style="background-color: #b30000; color: white; border: none; cursor: pointer;" onclick="confirmarRemocao(@item.Id, '@item.Titulo')">REMOVER</button>
                            </div>
                        }
                        else
                        {
                            <a asp-action="Details" asp-route-id="@item.Id" class="skills-details-btn">DETALHES</a>
                        }
                    </td>
                </tr>
            }
            </tbody>
        </table>
        
        <div class="mt-3" style="padding: 15px 0; border-top: 1px solid #ddd;">
            <small class="text-muted">
                <i class="bi bi-info-circle"></i> 
                @if (User.IsInRole("Aluno"))
                {
                    @:Total no histórico: @Model.Count() | 
                    @:Concluídas: @(Model.Count(t => t.Concluida)) | 
                    @:Expiradas: @(Model.Count(t => !t.Concluida))
                }
                else
                {
                    @:Total de tarefas: @Model.Count() | 
                    @:Concluídas: @(Model.Count(t => t.Concluida)) | 
                    @:Pendentes: @(Model.Count(t => !t.Concluida && t.DataFim >= DateTime.Now)) | 
                    @:Expiradas: @(Model.Count(t => !t.Concluida && t.DataFim < DateTime.Now))
                }
            </small>
        </div>
    }
</div>

<!-- Formulário hidden para exclusão -->
<form id="deleteForm" method="post" style="display: none;">
    @Html.AntiForgeryToken()
</form>

@section Scripts {
<script>
    // Debounce function
    function debounce(func, wait) {
        let timeout;
        return function(...args) {
            clearTimeout(timeout);
            timeout = setTimeout(() => func.apply(this, args), wait);
        };
    }
    
    // Submit on search input and filter changes
    const searchInput = document.getElementById('searchTarefa');
    const ucFilter = document.getElementById('ucFilter');
    const form = document.getElementById('tarefaSearchForm');
    
    if (searchInput) {
        searchInput.addEventListener('input', debounce(function() {
            form.submit();
        }, 400));
    }
    
    if (ucFilter) {
        ucFilter.addEventListener('change', function() {
            form.submit();
        });
    }
    
    // Função para confirmar remoção de tarefa
    function confirmarRemocao(tarefaId, tarefaTitulo) {
        if (confirm(`Tem a certeza de que deseja remover a tarefa "${tarefaTitulo}"?\n\nEsta ação não pode ser desfeita.`)) {
            const deleteForm = document.getElementById('deleteForm');
            deleteForm.action = '/Tarefas/Delete/' + tarefaId;
            deleteForm.submit();
        }
    }
    
    // Auto-dismiss alerts after 5 seconds
    setTimeout(function() {
        var alerts = document.querySelectorAll('.alert-success, .alert-danger');
        alerts.forEach(function(alert) {
            var bsAlert = new bootstrap.Alert(alert);
            bsAlert.close();
        });
    }, 5000);
</script>
}
