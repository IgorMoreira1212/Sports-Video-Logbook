@model Sports_Video_Logbook.Models.CreateTarefaViewModel
@{
    ViewData["Title"] = "Atribuir Tarefa";
}

<div class="skills-modal-bg">
    <div class="skills-modal-card">
        <form asp-action="Create" class="skills-modal-form" method="post" onsubmit="return validateSkillsPercentage()">
            <!-- Primeira linha: Nome (mais largo) -->
            <div class="form-row">
                <div class="form-col-2">
                    <input asp-for="Nome" class="skills-modal-input" placeholder="Nome*" autocomplete="off" style="margin-bottom: 2px;" />
                    <span asp-validation-for="Nome" class="skills-modal-error"></span>
                </div>
            </div>
            
            <!-- Segunda linha: UC e Atribuir a -->
            <div class="form-row">
                <div class="form-col">
                    <select asp-for="UCId" id="uc-select" class="skills-modal-input" style="margin-bottom: 2px;">
                        <option value="">Selecione a UC*</option>
                        @foreach (var uc in Model.UCsDisponiveis)
                        {
                            <option value="@uc.Id">@uc.Nome</option>
                        }
                    </select>
                    <span asp-validation-for="UCId" class="skills-modal-error"></span>
                </div>
                <div class="form-col">
                    <select asp-for="AtribuirA" id="atribuir-select" class="skills-modal-input" style="margin-bottom: 2px;">
                        <option value="">Atribuir a*</option>
                        <option value="Turma">Turma</option>
                        <option value="Aluno">Aluno</option>
                    </select>
                    <span asp-validation-for="AtribuirA" class="skills-modal-error"></span>
                </div>
            </div>
            
            <!-- Terceira linha: Turma (mais largo) -->
            <div class="form-row">
                <div class="form-col-2">
                    <div class="skills-dropdown-container">
                        <div class="skills-dropdown-header" id="turma-dropdown-header">
                            <input type="text" class="skills-modal-input" placeholder="Turma*" id="turma-search" autocomplete="off" readonly style="margin-bottom: 2px;" />
                            <span class="dropdown-arrow">⏷</span>
                        </div>
                        <div class="skills-dropdown-content" id="turma-dropdown">
                            <div class="skills-search-container">
                                <input type="text" placeholder="Pesquisar" id="turma-filter" class="skills-search-input" />
                            </div>
                            <div class="skills-options" id="turma-options">
                                @foreach (var turma in Model.TurmasDisponiveis)
                                {
                                    <label class="skills-option turma-option" data-ucid="@turma.UCId">
                                        <input type="checkbox" name="TurmasSelecionadas" value="@turma.Nome" />
                                        <span>@turma.Nome</span>
                                    </label>
                                }
                            </div>
                        </div>
                    </div>
                    <span asp-validation-for="TurmasSelecionadas" class="skills-modal-error"></span>
                </div>
            </div>
            
            <!-- Quarta linha: Alunos (condicional) -->
            <div id="alunos-container" style="display: none;">
                <div class="form-row">
                    <div class="form-col-2">
                        <div class="skills-dropdown-container">
                            <div class="skills-dropdown-header" id="alunos-header">
                                <input type="text" class="skills-modal-input" placeholder="Alunos*" id="alunos-search" autocomplete="off" readonly style="margin-bottom: 2px;" />
                                <span class="dropdown-arrow">⏷</span>
                            </div>
                            <div class="skills-dropdown-content" id="alunos-dropdown">
                                <div class="skills-search-container">
                                    <input type="text" placeholder="Pesquisar" id="alunos-filter" class="skills-search-input" />
                                </div>
                                <div class="skills-options" id="alunos-options">
                                    <!-- Alunos serão carregados dinamicamente -->
                                </div>
                            </div>
                        </div>
                        <span asp-validation-for="AlunosSelecionados" class="skills-modal-error"></span>
                    </div>
                </div>
            </div>
            
            <!-- Quinta linha: Skills (mais largo) -->
            <div class="form-row">
                <div class="form-col-2">
                    <label style="color: #67432F; font-family: Georgia, serif; font-weight: 500; margin-bottom: 2px; display: block;">Skills e Percentagens*</label>
                    <div id="skills-container" style="padding: 12px 16px; border-radius: 8px; border: 2px solid #b9b9b9; background: #fff; color: #67432F; font-family: Georgia, serif; min-height: 60px; max-height: 300px; overflow-y: auto;">
                        <div id="no-skills-message" style="color: #666; font-style: italic; text-align: center; padding: 20px;">
                            Nenhuma skill selecionada. Clique em "Adicionar Skill" para começar.
                        </div>
                    </div>
                    <button type="button" id="add-skill-btn" style="background: #67432F; color: white; border: none; border-radius: 6px; padding: 8px 16px; margin-top: 5px; cursor: pointer; font-family: Georgia, serif; font-weight: 500;">ADICIONAR SKILL</button>
                    <div id="total-percentage" style="margin-top: 5px; font-weight: bold; color: #67432F;">Total: 0%</div>
                    <span asp-validation-for="SkillsSelecionadas" class="skills-modal-error"></span>
                </div>
            </div>
            
            <!-- Sexta linha: Descrição (mais largo) -->
            <div class="form-row">
                <div class="form-col-2">
                    <textarea asp-for="Descricao" class="skills-modal-input" placeholder="Descrição*" rows="3" style="resize: vertical; min-height: 60px; margin-bottom: 2px;"></textarea>
                    <span asp-validation-for="Descricao" class="skills-modal-error"></span>
                </div>
            </div>
            
            <!-- Sétima linha: Data Limite -->
            <div class="form-row">
                <div class="form-col-2">
                    <input asp-for="DataFim" class="skills-modal-input" type="datetime-local" placeholder="Data Limite para Submissão*" style="margin-bottom: 2px;" />
                    <span asp-validation-for="DataFim" class="skills-modal-error"></span>
                    <div style="color: #d32f2f; font-size: 0.85rem; margin-top: 3px; font-family: Georgia, serif;">
                        Se não for inserida uma data, ficará automaticamente definida para 7 dias após a criação da tarefa.
                    </div>
                </div>
            </div>
            
            <!-- Campo oculto para DataInicio -->
            <input asp-for="DataInicio" type="hidden" />
            
            <div asp-validation-summary="All" class="skills-modal-error"></div>
            
            <div class="skills-modal-btns">
                <button type="submit" class="skills-modal-submit">SUBMETER</button>
                <a asp-action="Index" class="skills-modal-cancel">CANCELAR</a>
            </div>
        </form>
    </div>
</div>

<style>
/* Aumentar largura do modal para tarefas */
.skills-modal-card {
    width: 90%;
    max-width: 800px;
    padding: 20px;
    max-height: 90vh;
    overflow-y: auto;
}

/* Estilo personalizado para a scrollbar do modal */
.skills-modal-card::-webkit-scrollbar {
    width: 8px;
}

.skills-modal-card::-webkit-scrollbar-track {
    background: rgba(103, 67, 47, 0.1);
    border-radius: 4px;
}

.skills-modal-card::-webkit-scrollbar-thumb {
    background: rgba(103, 67, 47, 0.4);
    border-radius: 4px;
}

.skills-modal-card::-webkit-scrollbar-thumb:hover {
    background: rgba(103, 67, 47, 0.6);
}

/* Para Firefox */
.skills-modal-card {
    scrollbar-width: thin;
    scrollbar-color: rgba(103, 67, 47, 0.4) rgba(103, 67, 47, 0.1);
}

/* Layout de campos em linha */
.form-row {
    display: flex;
    gap: 12px;
    margin-bottom: 2px;
}

.form-col {
    flex: 1;
}

.form-col-2 {
    flex: 2;
}

.skills-dropdown-container {
    position: relative;
    margin-bottom: 2px;
}

.skills-dropdown-header {
    position: relative;
    cursor: pointer;
}

.dropdown-arrow {
    position: absolute;
    right: 15px;
    top: 50%;
    transform: translateY(-50%);
    color: #666;
    pointer-events: none;
}

/* Estilizar selects para ter aparência consistente */
select.skills-modal-input {
    -webkit-appearance: none;
    -moz-appearance: none;
    appearance: none;
    background-image: url('data:image/svg+xml;charset=US-ASCII,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 4 5"><path fill="%23666" d="M2 0L0 2h4zm0 5L0 3h4z"/></svg>');
    background-repeat: no-repeat;
    background-position: right 15px center;
    background-size: 12px;
    padding-right: 35px;
}

.skills-dropdown-content {
    display: none;
    position: absolute;
    top: 100%;
    left: 0;
    right: 0;
    background: white;
    border: 1px solid #ddd;
    border-radius: 8px;
    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    max-height: 200px;
    overflow-y: auto;
    z-index: 1000;
}

.skills-search-container {
    padding: 8px;
    border-bottom: 1px solid #eee;
}

.skills-search-input {
    width: 100%;
    padding: 6px;
    border: 1px solid #ddd;
    border-radius: 4px;
    outline: none;
}

.skills-options {
    max-height: 150px;
    overflow-y: auto;
}

.skills-option {
    display: flex;
    align-items: center;
    padding: 6px 12px;
    cursor: pointer;
    transition: background-color 0.2s;
}

.skills-option:hover {
    background-color: #f5f5f5;
}

.skills-option input[type="checkbox"] {
    margin-right: 8px;
}

.skills-dropdown-content.show {
    display: block;
}

/* Estilo personalizado para a scrollbar do container de skills */
#skills-container::-webkit-scrollbar {
    width: 8px;
}

#skills-container::-webkit-scrollbar-track {
    background: rgba(103, 67, 47, 0.1);
    border-radius: 4px;
}

#skills-container::-webkit-scrollbar-thumb {
    background: rgba(103, 67, 47, 0.4);
    border-radius: 4px;
}

#skills-container::-webkit-scrollbar-thumb:hover {
    background: rgba(103, 67, 47, 0.6);
}

/* Para Firefox */
#skills-container {
    scrollbar-width: thin;
    scrollbar-color: rgba(103, 67, 47, 0.4) rgba(103, 67, 47, 0.1);
}

/* Responsividade para o layout em colunas */
@@media (max-width: 768px) {
    .skills-modal-card {
        width: 95%;
        max-width: none;
        padding: 12px;
    }
    
    .form-row {
        flex-direction: column;
        gap: 0;
        margin-bottom: 6px;
    }
    
    .form-col, .form-col-2 {
        flex: none;
        width: 100%;
    }
}
</style>

<script>
// Dados das skills disponíveis
const skillsDisponiveis = [
    @foreach (var skill in Model.SkillsDisponiveis)
    {
        <text>{ id: @skill.Id, nome: '@Html.Raw(skill.Nome.Replace("'", "\\'"))' },</text>
    }
];

document.addEventListener('DOMContentLoaded', function() {
    const ucSelect = document.getElementById('uc-select');
    const atribuirSelect = document.getElementById('atribuir-select');
    const alunosContainer = document.getElementById('alunos-container');
    
    // Alunos dropdown functionality
    const alunosSearch = document.getElementById('alunos-search');
    const alunosDropdown = document.getElementById('alunos-dropdown');
    const alunosFilter = document.getElementById('alunos-filter');
    const alunosOptions = document.getElementById('alunos-options');
    

    
    // Turma dropdown functionality
    const turmaSearch = document.getElementById('turma-search');
    const turmaDropdown = document.getElementById('turma-dropdown');
    const turmaFilter = document.getElementById('turma-filter');
    const turmaOptions = document.getElementById('turma-options');
    const turmaCheckboxes = document.querySelectorAll('input[name="TurmasSelecionadas"]');
    
    // Dados dos alunos do servidor
    const alunosData = [
        @foreach (var aluno in Model.AlunosDisponiveis)
        {
            <text>{
                id: '@aluno.Id',
                displayText: '@aluno.DisplayText',
                turmaNome: '@aluno.TurmaNome',
                ucId: @aluno.UCId
            },</text>
        }
    ];

    // UC/Turma dependency
    ucSelect.addEventListener('change', function() {
        const selectedUCId = this.value;
        const turmaOptionsElements = turmaOptions.querySelectorAll('.turma-option[data-ucid]');
        
        // Reset turma selection
        turmaCheckboxes.forEach(checkbox => {
            checkbox.checked = false;
        });
        updateTurmaDisplay();
        
        // Reset alunos selection and clear dropdown
        clearAlunosSelection();
        alunosOptions.innerHTML = '';
        updateAlunosDisplay();
        
        // Show/hide turma options based on selected UC
        turmaOptionsElements.forEach(option => {
            if (!selectedUCId || option.dataset.ucid === selectedUCId) {
                option.style.display = 'flex';
            } else {
                option.style.display = 'none';
            }
        });
    });
    
    // Atribuir a functionality
    atribuirSelect.addEventListener('change', function() {
        if (this.value === 'Aluno') {
            alunosContainer.style.display = 'block';
            // Reset turma selection
            turmaCheckboxes.forEach(cb => {
                cb.checked = false;
                cb.required = false;
            });
            // Manter seleção múltipla (checkboxes) para permitir múltiplas turmas
            convertTurmaToCheckbox();
            updateTurmaDisplay();
            // Reset alunos
            clearAlunosSelection();
            alunosOptions.innerHTML = '';
            updateAlunosDisplay();
        } else if (this.value === 'Turma') {
            alunosContainer.style.display = 'none';
            clearAlunosSelection();
            // Mudar para seleção múltipla (checkboxes)
            convertTurmaToCheckbox();
            turmaCheckboxes.forEach(cb => cb.required = true);
        } else {
            alunosContainer.style.display = 'none';
            clearAlunosSelection();
            // Mudar para seleção múltipla (checkboxes)
            convertTurmaToCheckbox();
            turmaCheckboxes.forEach(cb => {
                cb.checked = false;
                cb.required = false;
            });
            updateTurmaDisplay();
        }
    });
    
    // Gerenciamento de skills com percentagens
    let skillIndex = 0;
    const skillsContainer = document.getElementById('skills-container');
    const addSkillBtn = document.getElementById('add-skill-btn');
    const noSkillsMessage = document.getElementById('no-skills-message');
    const totalPercentageDiv = document.getElementById('total-percentage');
    
    // Adicionar nova skill
    addSkillBtn.addEventListener('click', function() {
        const skillItem = document.createElement('div');
        skillItem.className = 'skill-item';
        skillItem.style.cssText = 'margin-bottom: 12px; padding: 10px; background: rgba(103, 67, 47, 0.05); border-radius: 6px; border: 1px solid rgba(103, 67, 47, 0.2);';
        
        // Criar o HTML da nova skill
        const skillItemDiv = document.createElement('div');
        skillItemDiv.style.cssText = 'display: flex; align-items: center; gap: 10px;';
        
        // Select da skill
        const skillSelectDiv = document.createElement('div');
        skillSelectDiv.style.flex = '1';
        const skillSelect = document.createElement('select');
        skillSelect.name = 'SkillsSelecionadas';
        skillSelect.className = 'skills-modal-input';
        skillSelect.style.marginBottom = '0';
        skillSelect.required = true;
        
        // Adicionar opções
        const defaultOption = document.createElement('option');
        defaultOption.value = '';
        defaultOption.textContent = 'Selecione uma skill';
        skillSelect.appendChild(defaultOption);
        
        // Adicionar skills disponíveis
        skillsDisponiveis.forEach(skill => {
            const option = document.createElement('option');
            option.value = skill.id;
            option.textContent = skill.nome;
            skillSelect.appendChild(option);
        });
        
        skillSelectDiv.appendChild(skillSelect);
        
        // Input do peso
        const pesoDiv = document.createElement('div');
        pesoDiv.style.width = '100px';
        const pesoInput = document.createElement('input');
        pesoInput.name = 'SkillsPesos[' + skillSelect.value + ']';
        pesoInput.type = 'number';
        pesoInput.min = '1';
        pesoInput.max = '100';
        pesoInput.value = '0';
        pesoInput.className = 'skills-modal-input';
        pesoInput.placeholder = 'Peso %';
        pesoInput.style.cssText = 'margin-bottom: 0; text-align: center;';
        pesoInput.required = true;
        pesoDiv.appendChild(pesoInput);
        
        // Botão remover
        const removeBtn = document.createElement('button');
        removeBtn.type = 'button';
        removeBtn.className = 'remove-skill-btn';
        removeBtn.style.cssText = 'background: #b30000; color: white; border: none; border-radius: 4px; padding: 8px 12px; cursor: pointer; font-size: 12px;';
        removeBtn.textContent = 'REMOVER';
        
        // Montar estrutura
        skillItemDiv.appendChild(skillSelectDiv);
        skillItemDiv.appendChild(pesoDiv);
        skillItemDiv.appendChild(removeBtn);
        skillItem.appendChild(skillItemDiv);
        
        skillsContainer.insertBefore(skillItem, noSkillsMessage);
        skillIndex++;
        updateSkillsVisibility();
        
        // Event listeners
        skillSelect.addEventListener('change', function() {
            pesoInput.name = 'SkillsPesos[' + this.value + ']';
            updateTotalPercentage();
        });
        
        pesoInput.addEventListener('input', updateTotalPercentage);
        
        removeBtn.addEventListener('click', function() {
            skillItem.remove();
            updateSkillsVisibility();
            updateTotalPercentage();
        });
    });
    
    // Atualizar visibilidade da mensagem "nenhuma skill"
    function updateSkillsVisibility() {
        const skillItems = skillsContainer.querySelectorAll('.skill-item');
        if (skillItems.length === 0) {
            noSkillsMessage.style.display = 'block';
        } else {
            noSkillsMessage.style.display = 'none';
        }
    }
    
    // Atualizar total de percentagem
    function updateTotalPercentage() {
        const pesoInputs = skillsContainer.querySelectorAll('input[type="number"]');
        let total = 0;
        
        pesoInputs.forEach(input => {
            const value = parseInt(input.value) || 0;
            total += value;
        });
        
        totalPercentageDiv.textContent = `Total: ${total}%`;
        totalPercentageDiv.style.color = total === 100 ? '#67432F' : (total > 100 ? '#b30000' : '#d32f2f');
        
        // Validação
        if (total !== 100 && pesoInputs.length > 0) {
            totalPercentageDiv.textContent += ' (deve somar 100%)';
        }
    }
    
    // Turma dropdown toggle
    turmaSearch.addEventListener('click', function() {
        turmaDropdown.classList.toggle('show');
        alunosDropdown.classList.remove('show'); // Close alunos dropdown
    });
    
    // Alunos dropdown toggle
    alunosSearch.addEventListener('click', function() {
        alunosDropdown.classList.toggle('show');
        turmaDropdown.classList.remove('show'); // Close turma dropdown
    });
    
    // Close dropdown when clicking outside
    document.addEventListener('click', function(e) {
        if (!e.target.closest('#turma-dropdown-header') && !e.target.closest('#turma-dropdown')) {
            turmaDropdown.classList.remove('show');
        }
        if (!e.target.closest('#alunos-header') && !e.target.closest('#alunos-dropdown')) {
            alunosDropdown.classList.remove('show');
        }
    });
    
    // Turma filter
    turmaFilter.addEventListener('input', function() {
        const filterText = this.value.toLowerCase();
        const options = turmaOptions.querySelectorAll('.turma-option');
        
        options.forEach(option => {
            const text = option.textContent.toLowerCase();
            option.style.display = text.includes(filterText) ? 'flex' : 'none';
        });
    });
    
    // Alunos filter
    alunosFilter.addEventListener('input', function() {
        const filterText = this.value.toLowerCase();
        const options = alunosOptions.querySelectorAll('.aluno-option');
        
        options.forEach(option => {
            const text = option.textContent.toLowerCase();
            option.style.display = text.includes(filterText) ? 'flex' : 'none';
        });
    });
    

    
    // Update turma display
    function updateTurmaDisplay() {
        // Pegar elementos atuais (sempre checkboxes agora)
        const currentTurmaInputs = document.querySelectorAll('input[name="TurmasSelecionadas"]');
        const selected = Array.from(currentTurmaInputs)
            .filter(cb => cb.checked)
            .map(cb => cb.nextElementSibling.textContent);
        
        if (selected.length > 0) {
            turmaSearch.value = selected.join(', ');
            turmaSearch.style.color = '#333';
        } else {
            turmaSearch.value = '';
            turmaSearch.placeholder = 'Turma*';
            turmaSearch.style.color = '#999';
        }
    }
    
    // Garantir que turmas sejam checkboxes (seleção múltipla)
    function convertTurmaToCheckbox() {
        turmaCheckboxes.forEach(checkbox => {
            checkbox.type = 'checkbox';
            checkbox.name = 'TurmasSelecionadas'; // Nome original para checkbox
            checkbox.checked = false; // Reset selection
        });
        // Atualizar referências
        updateTurmaCheckboxesReference();
    }
    
    // Atualizar referências dos checkboxes após conversão
    function updateTurmaCheckboxesReference() {
        const newTurmaCheckboxes = document.querySelectorAll('input[name="TurmasSelecionadas"]');
        
        // Remover listeners antigos
        turmaCheckboxes.forEach(checkbox => {
            checkbox.removeEventListener('change', updateTurmaDisplay);
        });
        
        // Adicionar listeners aos novos elementos
        newTurmaCheckboxes.forEach(checkbox => {
            checkbox.addEventListener('change', updateTurmaDisplay);
            checkbox.addEventListener('change', function() {
                const anyChecked = Array.from(newTurmaCheckboxes).some(cb => cb.checked);
                newTurmaCheckboxes.forEach(cb => {
                    cb.setCustomValidity(anyChecked ? '' : 'Deve selecionar pelo menos uma turma');
                });
                
                // Carregar alunos quando uma turma é selecionada/deselecionada
                if (atribuirSelect.value === 'Aluno') {
                    carregarAlunosPorTurma();
                }
            });
        });
    }
    
    // Função para carregar alunos baseado na turma selecionada
    function carregarAlunosPorTurma() {
        const turmasSelecionadas = Array.from(document.querySelectorAll('input[name="TurmasSelecionadas"]:checked'))
            .map(cb => cb.value);
        
        // Limpar alunos
        alunosOptions.innerHTML = '';
        
        if (turmasSelecionadas.length === 0) {
            updateAlunosDisplay();
            return;
        }
        
        // Filtrar alunos pelas turmas selecionadas
        const alunosFiltrados = alunosData.filter(aluno => 
            turmasSelecionadas.includes(aluno.turmaNome)
        );
        
        if (alunosFiltrados.length === 0) {
            alunosOptions.innerHTML = '<div style="padding: 15px; text-align: center; color: #666;">Nenhum aluno encontrado nesta(s) turma(s)</div>';
            updateAlunosDisplay();
            return;
        }
        
        // Remover duplicatas (caso um aluno esteja em múltiplas turmas selecionadas)
        const alunosUnicos = alunosFiltrados.filter((aluno, index, self) => 
            index === self.findIndex(a => a.id === aluno.id)
        );
        
        // Criar opções para alunos
        alunosUnicos.forEach(aluno => {
            const option = document.createElement('label');
            option.className = 'skills-option aluno-option';
            option.innerHTML = `
                <input type="checkbox" name="AlunosSelecionados" value="${aluno.id}" />
                <span>${aluno.displayText}</span>
            `;
            alunosOptions.appendChild(option);
        });
        
        // Adicionar event listeners aos novos checkboxes
        const alunosCheckboxes = alunosOptions.querySelectorAll('input[name="AlunosSelecionados"]');
        alunosCheckboxes.forEach(checkbox => {
            checkbox.addEventListener('change', updateAlunosDisplay);
        });
        
        updateAlunosDisplay();
    }
    
    // Update alunos display
    function updateAlunosDisplay() {
        const alunosCheckboxes = document.querySelectorAll('input[name="AlunosSelecionados"]');
        const selected = Array.from(alunosCheckboxes)
            .filter(cb => cb.checked)
            .map(cb => cb.nextElementSibling.textContent);
        
        if (selected.length > 0) {
            alunosSearch.value = selected.join(', ');
            alunosSearch.style.color = '#333';
        } else {
            alunosSearch.value = '';
            alunosSearch.placeholder = 'Alunos*';
            alunosSearch.style.color = '#999';
        }
    }
    
    // Clear alunos selection
    function clearAlunosSelection() {
        const alunosCheckboxes = document.querySelectorAll('input[name="AlunosSelecionados"]');
        alunosCheckboxes.forEach(checkbox => {
            checkbox.checked = false;
        });
        updateAlunosDisplay();
    }
    

    
    // Turma checkbox change handler
    turmaCheckboxes.forEach(checkbox => {
        checkbox.addEventListener('change', updateTurmaDisplay);
    });
    
    // Validation for turma checkboxes
    turmaCheckboxes.forEach(checkbox => {
        checkbox.addEventListener('change', function() {
            const anyChecked = Array.from(turmaCheckboxes).some(cb => cb.checked);
            turmaCheckboxes.forEach(cb => {
                cb.setCustomValidity(anyChecked ? '' : 'Deve selecionar pelo menos uma turma');
            });
        });
    });
    
    // Initialize
    updateTurmaDisplay();
    updateAlunosDisplay();
    updateSkillsVisibility();
});

// Função de validação para o formulário
function validateSkillsPercentage() {
    const skillItems = document.querySelectorAll('.skill-item');
    
    if (skillItems.length === 0) {
        alert('Deve adicionar pelo menos uma skill à tarefa.');
        return false;
    }
    
    let total = 0;
    let hasEmptySkill = false;
    let hasEmptyWeight = false;
    
    skillItems.forEach(item => {
        const skillSelect = item.querySelector('select[name="SkillsSelecionadas"]');
        const pesoInput = item.querySelector('input[type="number"]');
        
        if (!skillSelect.value) {
            hasEmptySkill = true;
        }
        
        const peso = parseInt(pesoInput.value) || 0;
        if (peso <= 0) {
            hasEmptyWeight = true;
        }
        
        total += peso;
    });
    
    if (hasEmptySkill) {
        alert('Todas as skills devem ser selecionadas.');
        return false;
    }
    
    if (hasEmptyWeight) {
        alert('Todas as skills devem ter um peso maior que 0.');
        return false;
    }
    
    if (total !== 100) {
        alert(`A soma das percentagens deve ser exatamente 100%. Atual: ${total}%`);
        return false;
    }
    
    return true;
}
</script>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const dataInicio = document.getElementById('DataInicio');
            const dataFim = document.getElementById('DataFim');
            
            // Definir DataInicio como o momento atual
            const agora = new Date();
            const agoraFormatado = agora.toISOString().slice(0, 16); // Formato YYYY-MM-DDTHH:MM
            dataInicio.value = agoraFormatado;
            
            // Definir valor mínimo para DataFim como o momento atual
            dataFim.min = agoraFormatado;
            
            function validarDatas() {
                if (dataFim.value) {
                    const inicio = new Date(dataInicio.value);
                    const fim = new Date(dataFim.value);
                    
                    if (fim < inicio) {
                        dataFim.setCustomValidity('A data limite para submissão não pode ser anterior à data de início.');
                    } else {
                        dataFim.setCustomValidity('');
                    }
                } else {
                    // Se não há valor, limpar qualquer erro de validação
                    dataFim.setCustomValidity('');
                }
            }
            
            dataFim.addEventListener('change', validarDatas);
            
            // Validar no carregamento da página
            validarDatas();
        });
    </script>
}
