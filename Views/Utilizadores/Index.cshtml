@model IEnumerable<Sports_Video_Logbook.Models.Utilizador>
@using Microsoft.AspNetCore.Identity
@inject UserManager<Utilizador> UserManager
@{
    ViewData["Title"] = "Utilizadores";
    var cargo = Context.Request.Query["cargo"].ToString();
    var currentUserId = UserManager.GetUserId(User);
    var allAdmins = await UserManager.GetUsersInRoleAsync("Admin");
    var activeAdmins = allAdmins.Where(u => u.LockoutEnd == null || u.LockoutEnd <= DateTimeOffset.Now).ToList();
}
<div class="skills-card">
    @if (ViewBag.Error != null)
    {
        <div class="alert alert-danger" style="margin-bottom: 18px;">@ViewBag.Error</div>
    }
    <div class="skills-header">
        <form id="userSearchForm" method="get" action="/Utilizadores/Index" class="d-flex" style="flex: 1; gap: 10px; margin-right: 15px;">
            <input id="searchInput" name="search" type="text" class="skills-search" placeholder="Pesquisar" value="@Context.Request.Query["search"]" autocomplete="off" style="flex: 1; min-width: 200px;" />
            <select id="cargoSelect" name="cargo" class="skills-search" style="width: 180px; flex-shrink: 0;">
                <option value="Todos" selected="@(cargo == "Todos" ? "selected" : null)">Todos</option>
                <option value="Aluno" selected="@(cargo == "Aluno" ? "selected" : null)">Aluno</option>
                <option value="Professor" selected="@(cargo == "Professor" ? "selected" : null)">Professor</option>
                <option value="Admin" selected="@(cargo == "Admin" ? "selected" : null)">Administrador</option>
            </select>
        </form>
        <a asp-action="Create" class="skills-add-btn" style="flex-shrink: 0;">ADICIONAR UTILIZADOR</a>
    </div>
    <table class="skills-table" style="width: 100%; table-layout: fixed;">
        <thead>
            <tr>
                <th class="skills-th" style="width: 35%;">Email</th>
                <th class="skills-th" style="width: 25%; padding-left: 5px;">UserName</th>
                <th class="skills-th" style="width: 20%;">Cargo</th>
                <th class="skills-th skills-th-action" style="width: 20%;">Ação</th>
            </tr>
        </thead>
        <tbody>
        @foreach (var user in Model) {
            var roles = await UserManager.GetRolesAsync(user);
            bool isLocked = user.LockoutEnd != null && user.LockoutEnd > DateTimeOffset.Now;
            bool isAdmin = roles.Contains("Admin");
            bool isOnlyActiveAdmin = isAdmin && activeAdmins.Count == 1 && (user.LockoutEnd == null || user.LockoutEnd <= DateTimeOffset.Now);
            bool isCurrentUser = user.Id == currentUserId;
            string disableReason = isOnlyActiveAdmin ? "Não é possível desativar o único administrador ativo." : (isCurrentUser ? "Não pode desativar a sua própria conta." : null);
            <tr class="skill-row">
                <td class="skills-td" style="width: 35%; padding-right: 10px;">@user.Email</td>
                <td class="skills-td" style="width: 25%; padding-left: 5px; font-weight: 600;">@user.UserName</td>
                <td class="skills-td" style="width: 20%;">@(roles.Count > 0 ? roles[0] : "-")</td>
                <td class="skills-td skills-td-action" style="width: 20%;">
                    <form asp-action="AlternarEstado" asp-route-id="@user.Id" method="post" style="display:inline;">
                        <button type="submit" class="skills-remove-btn">@(isLocked ? "ATIVAR" : "DESATIVAR")</button>
                    </form>
                </td>
            </tr>
        }
        </tbody>
    </table>
</div>
@section Scripts {
<script>
    // Debounce function
    function debounce(func, wait) {
        let timeout;
        return function(...args) {
            clearTimeout(timeout);
            timeout = setTimeout(() => func.apply(this, args), wait);
        };
    }
    // Submit on search input
    const searchInput = document.getElementById('searchInput');
    const cargoSelect = document.getElementById('cargoSelect');
    const form = document.getElementById('userSearchForm');
    if (searchInput) {
        searchInput.addEventListener('input', debounce(function() {
            form.submit();
        }, 400));
    }
    if (cargoSelect) {
        cargoSelect.addEventListener('change', function() {
            form.submit();
        });
    }
</script>
} 